1. What is ECMAScript 
2. Wha is Type Script

What is ECMAScript :- 
------------------
The JavaScript language standard is officially called ECMAScript. 
Over the past several years many versions of ECMAScript were released starting with ECMAScript version 1 all the way till ECMAScript version 7.

Wha is Type Script :-
------------------
TypeScript is a free and open-source programming language developed by Microsoft. 
It is a superset of JavaScript and compiles to JavaScript through a process called transpilation. 
Using TypeScript to build angular applications provides several benefits.
1. Intellisense 
2. Autocompletion
3. Code navigation
4. Advanced refactoring
5. Strong Typing
6. Supports ES 2015 (also called ES 6)
===================================================================================
What is a component?
-------------------
A component in Angular is a class with a template and a decorator.
Components are the basic building blocks of angular application.

Template - Defines the user interface. Contains the HTML, directives and bindings.
Class - Contains the code required for template.
Decorator - We use the Component decorator provided by Angular to add metadata to the class.

Example:-
-------
import { Component } from "@angular/core";

@Component({ //decorator
  selector: 'my-app', //metadata
  template:`<h1>Hello {{name}}</h1>` //template
})
export class AppComponent { //class
  name: string = 'Angular';
}
==================================================================================================
What is AppModule?
AppModule is the root module which bootstraps and launches the angular application. 
You can name it anything you want, but by convention it is named AppModule.

BrowserModule - Every application that runs in a browser needs this module.
NgModule - @component decorator adds metadata to an angular component class, 
similarly @NgModule decorator adds metadata to the angular module class.

Properties of the @NgModule decorator :-
-------------------------------------
imports - Imports the BrowserModule required for an angular application to run in a web browser.
declarations - Contains the components registered with this module. 
bootstrap - Contains the root component that Angular creates and inserts into the index.html host web page.

=====================================================================================================
Angular interpolation :-
----------------------
Interpolation is all about data binding. 
In Angular data-binding can be broadly classified into 3 categories

One way data-binding - From Component to View Template.To display read-only data.{{propertyName}}.
One way data-binding - From View Template to Component.
Two way data-binding - From Component to View Template & From View template to Component.

Interpolation :-
Interpolation is a special syntax that Angular converts into a property binding. 
Interpolation is just a convenient alternative to property binding. 
example :- <img src='http://www.pragimtech.com/{{imagePath}}' />

Property binding :-
With Property binding we enclose the element property name in square brackets.
ex :- <button [disabled]='isDisabled'>Click me</button>.

We can also use the alternate syntax with bind- prefix. This is known as canonical form
ex:- <button bind-disabled='isDisabled'>Click me</button>.

What is DOM?
DOM stands for Document Object Model.
When a browser loads a web page, the browser creates a Document Object Model of that page.

What is the difference between HTML element attribute and DOM property?
Attributes are defined by HTML, where as properties are defined by the DOM.
Attributes initialize DOM properties. Once the initialization complete, the attributes job is done.
Property values can change, where as attribute values can't.

Attribute binding :-
This error is because we do not have a corresponding property in the DOM for colspan attribute. 
To fix this we have to use attribute-binding in Angular, which sets the colspan attribute. 
To tell angular framework that we are setting an attribute value we have to prefix the attribute name with attr and a DOT as shown below.
Ex :- <th [attr.colspan]="columnSpan">

The same is true when using interpolation
Ex :- <th attr.colspan="{{columnSpan}}">

class binding :- [ngclass]
-------------
style binding :- [ngstyle]
-------------
Event binding :- (Click)
--------------
When a user performs any action like clicking on a button, hovering over an element,
selecting from a dropdownlist, typing in a textbox etc, 
then the corresponding event for that action is raised. 
We need to know when user performs these actions.
We can use angular event binding to get notified when these events occur.

Twoway data binding :-
--------------------
Ex :- <input [(ngModel)]='name'>
The square brackets on the outside are for property binding 
The parentheses on the inside are for event binding

ngFor directive :- *ngFor
---------------
ngFor is usually used to display an array of items
Since ngFor is a structural directive it is prefixed with *

trackBy ngFor directive :-
-----------------------
We can help Angular to track which items added or removed by providing a trackBy function. 
The trackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.

Pipes in Angular :-
----------------
Transform data before display.
Built in pipes include lowercase, uppercase, decimal, date, percent, currency etc.

To apply a pipe on a bound property use the pipe character " | "
Ex:-  <td>{{employee.code | uppercase}}</td>

We can also chain pipes.
Ex:-  <td>{{employee.dateOfBirth | date:'fullDate' | uppercase }}</td>

Pass parameters to pipe using colon " : "
Ex:-  <td>{{employee.annualSalary | currency:'USD':true:'1.3-3'}}</td>
      <td>{{employee.dateOfBirth | date:'fullDate'}}</td>
      <td>{{employee.dateOfBirth | date:'dd/MM/y'}}</td>

Custom pipes can be created.

Custom Pipe in Angular :-
----------------------
A pipe is a class decorated with pipe metadata. 
The pipe class implements the PipeTransform interface's transform method that accepts an input value followed by optional parameters and returns the transformed value.

Nested Parent Components :-
------------------------

@Input :-
------
Pass data from parent to child with input bindinglink.
Input is used to receive data in whereas Output is used to send data out. 
Output sends data out by exposing event producers, usually EventEmitter objects.

@Output :-
-------
Pass data from child to parent with Output bindinglink.
Output sends data out by exposing event producers, usually EventEmitter objects.

Operator :-
--------
=	  :- Assign a value
==  :-	Compare two values
=== :- Compare two values and their types

Interfaces in Angular 2 :-
----------------------- 
It only contain declarations of properties, methods and events. 
The implementation for the interface members is provided by a class that implements the interface.

Use interface keyword to create an interface.
Use the implements keyword to make a class implement an interface.
To reduce the amount of code you have to write, 
consider using short-hand syntax to initialise class properties with constructor parameters.


Angular component lifecycle hooks :-
---------------------------------
A component has a lifecycle managed by Angular. Angular
Creates the component
Renders the component
Creates and renders the component children
Checks when the component data-bound properties change, and 
Destroys the component before removing it from the DOM.



Life Cycle Hook	Purpose
ngOnChanges :-	Executes, every time the value of an input property changes. The hook method receives a SimpleChanges object containing current and previous property values. This is called before ngOnInit
ngOnInit :-	Executes after the constructor and after ngOnChange hook for the first time. It is most commonly used for component initialisation and retrieving data from a database
ngOnDestroy :-	Executes just before angular destroys the component and generally used for performing cleanup.

Angular services :-
----------------
Angular services are single objects that normally get instantiated only once during the lifetime of the Angular application. 
This Angular service maintains data throughout the life of an application.
It means data does not get replaced or refreshed and is available all the time.

A service in Angular is generally used when you need to reuse data or logic across multiple components. 
Anytime you see logic or data-access duplicated across multiple components, think about refactoring that piece of logic or data-access code into a service. 
Using a service ensures we are not violating one of the Software principles - DRY ((Don't repeat yourself). 
The logic or data access is implemented once in a service, and the service can be used across all the components in our application.

Injectable:-
----------
To define a class as a service in Angular, use the @Injectable() decorator to provide the metadata that allows Angular to inject it into a component as a dependency. 
Similarly, use the @Injectable() decorator to indicate that a component or other class (such as another service, a pipe, or a

What is an Observable?
---------------------
Observable is an asynchronous pattern. In the Observable pattern we have an Observable and an Observer. 
Observer observes the Observable. In many implementations an Observer is also called as a Subscriber.
An Observable can have many Observers (also called Subscribers).
Observable emits items or notifications over time to which an Observer (also called Subscriber) can subscribe.
When a subscriber subscribes to an Observable, the subscriber also specifies a callback function.
This subscriber callback function is notified as and when the Observable emits items or notifications.
Within this callback function we write code to handle data itmes or notifications received from the Observable.

http error handling :-
-------------------
When using http, to call a web service, errors may occur. 
When they do occur we want to handle these errors.
We use the catch operator to catch any exceptions that occur.

Angular 2 routing :-
-----------------
Routing is used to navigate to one component to other component.

What is Dependency Injection?
----------------------------
It's a coding pattern in which a class receives its dependencies from an external source rather than creating them itself. 

Why dependency injection?
------------------------
Create applications that are easy to write and maintain over time as the application evolves.
Easy to share data and functionality as the angular injector provides a Singleton.
i.e a single instance of the service
Easy to write and maintain unit tests as the dependencies can be mocked.